#BlueJ class context
comment0.target=BinaryTree
comment0.text=\n\ A\ binary\ integer\ tree.\n\n\ @author\ Edgar\ Barrantes\n\ @version\ 0.0.1\n
comment1.params=
comment1.target=BinaryTree()
comment1.text=\n\ Constructors\ for\ objects\ of\ class\ BinaryTree\n
comment10.params=root
comment10.target=int\ dePeso(boolean)
comment10.text=\n\ Returns\ number\ of\ nodes\ in\ the\ tree.\ P\ counts\ the\ ammount\ of\ nodes.\ If\ the\n\ we're\ on\ the\ root,\ it\ adds\ 1\ to\ count\ the\ root\ itself.\n
comment11.params=root\ p
comment11.target=int\ deProfundidad(boolean,\ int)
comment11.text=\n\ Returns\ the\ depth\ of\ the\ tree.\n
comment12.params=level
comment12.target=int\ deAnchuraNivel(int)
comment12.text=\n\ Returns\ the\ breadth\ of\ specific\ level.\n
comment13.params=
comment13.target=int[]\ deAnchura()
comment13.text=\n\ Returns\ the\ max\ breadth\ of\ the\ tree.\n
comment14.params=root
comment14.target=int\ deMayorMenores(boolean)
comment14.text=\n\ Returns\ the\ greatest\ number\ of\ the\ numbers\ that\ are\ lower\ than\ the\ one\ in\ the\n\ current\ node.\n
comment15.params=root
comment15.target=int\ deMenorMayores(boolean)
comment15.text=\n\ Returns\ the\ lowest\ number\ of\ the\ numbers\ that\ are\ greater\ to\ the\ one\ in\ the\n\ current\ node.\n
comment16.params=
comment16.target=boolean\ isLeaf()
comment16.text=\n\ Check\ if\ the\ tree\ is\ a\ leaf.\n
comment17.params=v
comment17.target=void\ erase2(int)
comment17.text=\n\ Deletes\ a\ leaf\ in\ the\ tree.\n\ This\ is\ done\ less\ efficiently.\n\ \n\ If\ node\ is\ leaf\:\ then\ just\ erase\ it.\ Else\:\ if\ it\ only\ has\ one\ subtree,\ use\n\ the\ closest\ number\ in\ that\ subtree\ to\ replace\ it.\ If\ it\ has\ 2\ subtrees,\ then\n\ compare\ weights.\ Use\ the\ heaviest.\ And\ use\ the\ closest\ number\ in\ that\ sub-\n\ tree\ to\ replace\ it.\ After\ that,\ search\ for\ the\ number\ it\ was\ used\ to\ replace\n\ it\ in\ the\ corresponding\ subtree\ (because\ if\ not,\ it\ will\ find\ it\ self),\ and\n\ call\ the\ erase\ fuction\ again\n
comment18.params=
comment18.target=void\ cleanUp()
comment18.text=\n\ Cleans\ up\ the\ tree,\ every\ leaf\ with\ empty\ \=\ true\ gets\ deleted.\n
comment19.params=v
comment19.target=BinaryTree\ erase(int)
comment19.text=\n\ Erase\ efficient.\n
comment2.params=v
comment2.target=BinaryTree(int)
comment20.params=args
comment20.target=void\ main(java.lang.String[])
comment20.text=\n\ Testing\ of\ the\ tree.\n
comment3.params=t
comment3.target=BinaryTree(BinaryTree)
comment4.params=v
comment4.target=void\ add(int)
comment4.text=\n\ Adds\ an\ interger\ to\ the\ tree.\n
comment5.params=v
comment5.target=boolean\ existe(int)
comment5.text=\n\ Returns\ a\ boolean\ indicating\ if\ the\ integer\ is\ in\ the\ tree.\n
comment6.params=v
comment6.target=BinaryTree\ search(int)
comment6.text=\n\ Returns\ a\ tree\ starting\ in\ the\ searched\ for\ number.\ Returns\ null\ if\ the\n\ number\ is\ not\ on\ the\ tree.\n
comment7.params=
comment7.target=java.lang.String\ getIPD()
comment7.text=\n\ Show\ tree\ in\ IPD\ order.\n
comment8.params=
comment8.target=java.lang.String\ getPID()
comment8.text=\n\ Show\ tree\ in\ PID\ order.\n
comment9.params=t\ p
comment9.target=java.lang.String\ muestreArbol(java.lang.String,\ int)
comment9.text=\n\ Show\ tree\ in\ a\ IPD\ fashion\ but\ rotated\ 270\ degrees.\n
numComments=21
